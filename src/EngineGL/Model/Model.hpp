#ifndef MODEL_HPP
# define MODEL_HPP

#include "../Texture/Texture.hpp"
#include "../Math/Matrix.hpp"
#include "../vendors/stb/stb_image.h"
#include "../Shader/Shader.hpp"
#include "../Texture/Texture.hpp"

using namespace std;

#define TEXTURE_MODE 8
#define RAND_COLOR_MODE 6
#define NO_COLOR_MODE 3

// A shaderProgram consists of at least two types of shaders:
// 	-	Vertex Shader (vertexShader): Processes each vertex of a 3D model, transforming its position and passing data to the next stages of the pipeline.
// 	-	Fragment Shader (fragmentShader): Processes fragments (pixels) generated by rasterizing the 3D model. It determines the final color of each pixel.

using namespace std;

class FaceVertex {
	public:
		int		vertexIndex;	// v: Geometric vertex
		int		normalIndex;	// vn: Vertex normals
		int		textureIndex;	// vt: Texture coordinates
};

class Model
{
	public:

	string					filePath;			// Path to the .obj file

	string					modelName;			// o: Indicates the start of a new object in the .obj file

	string					mtlLib;				// mtllib: Specifies the texture library file.
	string					smoothing;			// s: Smoothing on or off (on is the default)

	vector<vector<float> >	vertices;			// v: Geometric vertices
	vector<vector<float> >	verticeNormals;		// vn: Vertex normals
	vector<vector<float> >	verticeTextCoords;	// vt: Texture coordinates

	// Faces should be [n][3] where n is the number of faces and 3 is the number of vertices per face
	vector<vector<FaceVertex>>	faces;			// f: Face elements

	// Matrices to store the transformations
	Mat4 					rotationMatrix = Mat4();
	Mat4 					scaleMatrix = Mat4();
	Mat4 					translationMatrix = Mat4();

	int						currMode = 8;

	// VAO, VBO, and EBO
	unsigned int			VAO, VBO, EBO;

	// texture
	Texture					texture;
	int						width, height, nrChannels;
	unsigned char			*data;
	unsigned int			textureID;
	unsigned int			texLoc;

	Model();
	Model(string filePath);
	~Model();

	// Parse the .obj file and load the model
	void					loadModel();

	void					parseLine(string line);

	void					parseV(string line);
	void					parseVN(string line);
	void					parseVT(string line);
	void					parseF(string line);

	void					parseMtlLib(string line);
	void					parseMtlName(string line);
	void					parseSmoothing(string line);
	void					parseObjectName(string line);

	// VAO, VBO, and EBO functions
	void 					setupBuffers();
	void					deleteBuffers();
	void					setVertices(int mode);

	// Textures functions
	void 					loadTexture(const char* path);

	// Function to transform vertices into a 1D array of floats
	float*					transformVertices();
	void					normalizeVertices();

	// Function to transform faces into a 1D array of ints
	int*					transformFaces();

	// Rotate the model by specified angles around the X, Y, and Z axes.
	void	Rotate(float angle, float dirX, float dirY, float dirZ);

	// Translate (move) the model by specified offsets in the X, Y, and Z directions.
	void	Translate(float offsetX, float offsetY, float offsetZ);

	// Scale the model uniformly by a specified factor.
	void	Scale(float scale);

	// Create final transformation matrix
	Mat4	createFinalMatrix();

	// Draw model separately with its on VAO
	void	draw(unsigned int shaderID);

	// print operator overload
	friend ostream& operator<<(ostream& os, const Model& model);
};



#endif